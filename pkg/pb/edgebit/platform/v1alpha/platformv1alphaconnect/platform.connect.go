// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: edgebit/platform/v1alpha/platform.proto

package platformv1alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha "github.com/edgebitio/edgebit-cli/pkg/pb/edgebit/platform/v1alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EdgeBitPublicAPIServiceName is the fully-qualified name of the EdgeBitPublicAPIService service.
	EdgeBitPublicAPIServiceName = "edgebit.platform.v1alpha.EdgeBitPublicAPIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EdgeBitPublicAPIServiceListProjectsProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListProjects RPC.
	EdgeBitPublicAPIServiceListProjectsProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListProjects"
	// EdgeBitPublicAPIServiceGenerateAgentDeployTokenProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GenerateAgentDeployToken RPC.
	EdgeBitPublicAPIServiceGenerateAgentDeployTokenProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GenerateAgentDeployToken"
	// EdgeBitPublicAPIServiceCreateAgentDeployTokenProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's CreateAgentDeployToken RPC.
	EdgeBitPublicAPIServiceCreateAgentDeployTokenProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/CreateAgentDeployToken"
	// EdgeBitPublicAPIServiceListAgentDeployTokensProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListAgentDeployTokens RPC.
	EdgeBitPublicAPIServiceListAgentDeployTokensProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListAgentDeployTokens"
	// EdgeBitPublicAPIServiceDeleteAgentDeployTokenProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's DeleteAgentDeployToken RPC.
	EdgeBitPublicAPIServiceDeleteAgentDeployTokenProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/DeleteAgentDeployToken"
	// EdgeBitPublicAPIServiceListMachinesProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListMachines RPC.
	EdgeBitPublicAPIServiceListMachinesProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListMachines"
	// EdgeBitPublicAPIServiceGetMachineInventoryProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetMachineInventory RPC.
	EdgeBitPublicAPIServiceGetMachineInventoryProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetMachineInventory"
	// EdgeBitPublicAPIServiceOverviewProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's Overview RPC.
	EdgeBitPublicAPIServiceOverviewProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/Overview"
	// EdgeBitPublicAPIServiceCreateOrgAccessTokenProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's CreateOrgAccessToken RPC.
	EdgeBitPublicAPIServiceCreateOrgAccessTokenProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/CreateOrgAccessToken"
	// EdgeBitPublicAPIServiceListOrgAccessTokensProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListOrgAccessTokens RPC.
	EdgeBitPublicAPIServiceListOrgAccessTokensProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListOrgAccessTokens"
	// EdgeBitPublicAPIServiceDeleteOrgAccessTokenProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's DeleteOrgAccessToken RPC.
	EdgeBitPublicAPIServiceDeleteOrgAccessTokenProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/DeleteOrgAccessToken"
	// EdgeBitPublicAPIServiceUploadSBOMProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's UploadSBOM RPC.
	EdgeBitPublicAPIServiceUploadSBOMProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/UploadSBOM"
	// EdgeBitPublicAPIServiceListSBOMsProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListSBOMs RPC.
	EdgeBitPublicAPIServiceListSBOMsProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListSBOMs"
	// EdgeBitPublicAPIServiceGetSBOMProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetSBOM RPC.
	EdgeBitPublicAPIServiceGetSBOMProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetSBOM"
	// EdgeBitPublicAPIServiceGetSBOMInventoryProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetSBOMInventory RPC.
	EdgeBitPublicAPIServiceGetSBOMInventoryProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetSBOMInventory"
	// EdgeBitPublicAPIServiceListComponentsProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListComponents RPC.
	EdgeBitPublicAPIServiceListComponentsProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListComponents"
	// EdgeBitPublicAPIServiceGetComponentProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetComponent RPC.
	EdgeBitPublicAPIServiceGetComponentProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetComponent"
	// EdgeBitPublicAPIServiceCreateComponentProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's CreateComponent RPC.
	EdgeBitPublicAPIServiceCreateComponentProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/CreateComponent"
	// EdgeBitPublicAPIServiceUpdateComponentProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's UpdateComponent RPC.
	EdgeBitPublicAPIServiceUpdateComponentProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/UpdateComponent"
	// EdgeBitPublicAPIServiceDeleteComponentProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's DeleteComponent RPC.
	EdgeBitPublicAPIServiceDeleteComponentProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/DeleteComponent"
	// EdgeBitPublicAPIServiceListComponentTagsProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListComponentTags RPC.
	EdgeBitPublicAPIServiceListComponentTagsProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListComponentTags"
	// EdgeBitPublicAPIServiceGetComponentTagProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetComponentTag RPC.
	EdgeBitPublicAPIServiceGetComponentTagProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetComponentTag"
	// EdgeBitPublicAPIServiceSetComponentTagProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's SetComponentTag RPC.
	EdgeBitPublicAPIServiceSetComponentTagProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/SetComponentTag"
	// EdgeBitPublicAPIServiceDeleteComponentTagProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's DeleteComponentTag RPC.
	EdgeBitPublicAPIServiceDeleteComponentTagProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/DeleteComponentTag"
	// EdgeBitPublicAPIServiceGetComponentTagsOverviewProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetComponentTagsOverview RPC.
	EdgeBitPublicAPIServiceGetComponentTagsOverviewProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetComponentTagsOverview"
	// EdgeBitPublicAPIServiceGetCIBotCommentProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetCIBotComment RPC.
	EdgeBitPublicAPIServiceGetCIBotCommentProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetCIBotComment"
	// EdgeBitPublicAPIServiceListWorkloadsProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's ListWorkloads RPC.
	EdgeBitPublicAPIServiceListWorkloadsProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/ListWorkloads"
	// EdgeBitPublicAPIServiceGetWorkloadProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetWorkload RPC.
	EdgeBitPublicAPIServiceGetWorkloadProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetWorkload"
	// EdgeBitPublicAPIServiceGetSBOMDownloadUrlProcedure is the fully-qualified name of the
	// EdgeBitPublicAPIService's GetSBOMDownloadUrl RPC.
	EdgeBitPublicAPIServiceGetSBOMDownloadUrlProcedure = "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/GetSBOMDownloadUrl"
)

// EdgeBitPublicAPIServiceClient is a client for the
// edgebit.platform.v1alpha.EdgeBitPublicAPIService service.
type EdgeBitPublicAPIServiceClient interface {
	// Project Management (org-scoped)
	ListProjects(context.Context, *connect_go.Request[v1alpha.ListProjectsRequest]) (*connect_go.Response[v1alpha.ListProjectsResponse], error)
	// Agent Deployment Token Management (project-scoped)
	GenerateAgentDeployToken(context.Context, *connect_go.Request[v1alpha.GenerateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.GenerateAgentDeployTokenResponse], error)
	CreateAgentDeployToken(context.Context, *connect_go.Request[v1alpha.CreateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.CreateAgentDeployTokenResponse], error)
	ListAgentDeployTokens(context.Context, *connect_go.Request[v1alpha.ListAgentDeployTokensRequest]) (*connect_go.Response[v1alpha.ListAgentDeployTokensResponse], error)
	DeleteAgentDeployToken(context.Context, *connect_go.Request[v1alpha.DeleteAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.DeleteAgentDeployTokenResponse], error)
	// Machine Management (project-scoped)
	ListMachines(context.Context, *connect_go.Request[v1alpha.ListMachinesRequest]) (*connect_go.Response[v1alpha.ListMachinesResponse], error)
	// Inventory Exploration (project-scoped)
	GetMachineInventory(context.Context, *connect_go.Request[v1alpha.GetMachineInventoryRequest]) (*connect_go.Response[v1alpha.GetMachineInventoryResponse], error)
	Overview(context.Context, *connect_go.Request[v1alpha.OverviewRequest]) (*connect_go.Response[v1alpha.OverviewResponse], error)
	// Org (Project) Access Token Management (project-scoped)
	CreateOrgAccessToken(context.Context, *connect_go.Request[v1alpha.CreateOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.CreateOrgAccessTokenResponse], error)
	ListOrgAccessTokens(context.Context, *connect_go.Request[v1alpha.ListOrgAccessTokensRequest]) (*connect_go.Response[v1alpha.ListOrgAccessTokensResponse], error)
	DeleteOrgAccessToken(context.Context, *connect_go.Request[v1alpha.DeleteOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.DeleteOrgAccessTokenResponse], error)
	// SBOM Management (project-scoped)
	UploadSBOM(context.Context) *connect_go.ClientStreamForClient[v1alpha.UploadSBOMRequest, v1alpha.UploadSBOMResponse]
	ListSBOMs(context.Context, *connect_go.Request[v1alpha.ListSBOMsRequest]) (*connect_go.Response[v1alpha.ListSBOMsResponse], error)
	GetSBOM(context.Context, *connect_go.Request[v1alpha.GetSBOMRequest]) (*connect_go.Response[v1alpha.GetSBOMResponse], error)
	GetSBOMInventory(context.Context, *connect_go.Request[v1alpha.GetSBOMInventoryRequest]) (*connect_go.Response[v1alpha.GetSBOMInventoryResponse], error)
	// Componeent Management (project-scoped)
	ListComponents(context.Context, *connect_go.Request[v1alpha.ListComponentsRequest]) (*connect_go.Response[v1alpha.ListComponentsResponse], error)
	GetComponent(context.Context, *connect_go.Request[v1alpha.GetComponentRequest]) (*connect_go.Response[v1alpha.GetComponentResponse], error)
	CreateComponent(context.Context, *connect_go.Request[v1alpha.CreateComponentRequest]) (*connect_go.Response[v1alpha.CreateComponentResponse], error)
	UpdateComponent(context.Context, *connect_go.Request[v1alpha.UpdateComponentRequest]) (*connect_go.Response[v1alpha.UpdateComponentResponse], error)
	DeleteComponent(context.Context, *connect_go.Request[v1alpha.DeleteComponentRequest]) (*connect_go.Response[v1alpha.DeleteComponentResponse], error)
	// Component Tags Management (project-scoped)
	ListComponentTags(context.Context, *connect_go.Request[v1alpha.ListComponentTagsRequest]) (*connect_go.Response[v1alpha.ListComponentTagsResponse], error)
	GetComponentTag(context.Context, *connect_go.Request[v1alpha.GetComponentTagRequest]) (*connect_go.Response[v1alpha.GetComponentTagResponse], error)
	SetComponentTag(context.Context, *connect_go.Request[v1alpha.SetComponentTagRequest]) (*connect_go.Response[v1alpha.SetComponentTagResponse], error)
	DeleteComponentTag(context.Context, *connect_go.Request[v1alpha.DeleteComponentTagRequest]) (*connect_go.Response[v1alpha.DeleteComponentTagResponse], error)
	GetComponentTagsOverview(context.Context, *connect_go.Request[v1alpha.GetComponentTagsOverviewRequest]) (*connect_go.Response[v1alpha.GetComponentTagsOverviewResponse], error)
	// CI/CD Integration (project-scoped)
	GetCIBotComment(context.Context, *connect_go.Request[v1alpha.GetCIBotCommentRequest]) (*connect_go.Response[v1alpha.GetCIBotCommentResponse], error)
	// Workload Management (project-scoped)
	ListWorkloads(context.Context, *connect_go.Request[v1alpha.ListWorkloadsRequest]) (*connect_go.Response[v1alpha.ListWorkloadsResponse], error)
	GetWorkload(context.Context, *connect_go.Request[v1alpha.GetWorkloadRequest]) (*connect_go.Response[v1alpha.GetWorkloadResponse], error)
	// Get Sbom Download Url
	GetSBOMDownloadUrl(context.Context, *connect_go.Request[v1alpha.GetSBOMDownloadUrlRequest]) (*connect_go.Response[v1alpha.GetSBOMDownloadUrlResponse], error)
}

// NewEdgeBitPublicAPIServiceClient constructs a client for the
// edgebit.platform.v1alpha.EdgeBitPublicAPIService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEdgeBitPublicAPIServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EdgeBitPublicAPIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &edgeBitPublicAPIServiceClient{
		listProjects: connect_go.NewClient[v1alpha.ListProjectsRequest, v1alpha.ListProjectsResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListProjectsProcedure,
			opts...,
		),
		generateAgentDeployToken: connect_go.NewClient[v1alpha.GenerateAgentDeployTokenRequest, v1alpha.GenerateAgentDeployTokenResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGenerateAgentDeployTokenProcedure,
			opts...,
		),
		createAgentDeployToken: connect_go.NewClient[v1alpha.CreateAgentDeployTokenRequest, v1alpha.CreateAgentDeployTokenResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceCreateAgentDeployTokenProcedure,
			opts...,
		),
		listAgentDeployTokens: connect_go.NewClient[v1alpha.ListAgentDeployTokensRequest, v1alpha.ListAgentDeployTokensResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListAgentDeployTokensProcedure,
			opts...,
		),
		deleteAgentDeployToken: connect_go.NewClient[v1alpha.DeleteAgentDeployTokenRequest, v1alpha.DeleteAgentDeployTokenResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceDeleteAgentDeployTokenProcedure,
			opts...,
		),
		listMachines: connect_go.NewClient[v1alpha.ListMachinesRequest, v1alpha.ListMachinesResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListMachinesProcedure,
			opts...,
		),
		getMachineInventory: connect_go.NewClient[v1alpha.GetMachineInventoryRequest, v1alpha.GetMachineInventoryResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetMachineInventoryProcedure,
			opts...,
		),
		overview: connect_go.NewClient[v1alpha.OverviewRequest, v1alpha.OverviewResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceOverviewProcedure,
			opts...,
		),
		createOrgAccessToken: connect_go.NewClient[v1alpha.CreateOrgAccessTokenRequest, v1alpha.CreateOrgAccessTokenResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceCreateOrgAccessTokenProcedure,
			opts...,
		),
		listOrgAccessTokens: connect_go.NewClient[v1alpha.ListOrgAccessTokensRequest, v1alpha.ListOrgAccessTokensResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListOrgAccessTokensProcedure,
			opts...,
		),
		deleteOrgAccessToken: connect_go.NewClient[v1alpha.DeleteOrgAccessTokenRequest, v1alpha.DeleteOrgAccessTokenResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceDeleteOrgAccessTokenProcedure,
			opts...,
		),
		uploadSBOM: connect_go.NewClient[v1alpha.UploadSBOMRequest, v1alpha.UploadSBOMResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceUploadSBOMProcedure,
			opts...,
		),
		listSBOMs: connect_go.NewClient[v1alpha.ListSBOMsRequest, v1alpha.ListSBOMsResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListSBOMsProcedure,
			opts...,
		),
		getSBOM: connect_go.NewClient[v1alpha.GetSBOMRequest, v1alpha.GetSBOMResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetSBOMProcedure,
			opts...,
		),
		getSBOMInventory: connect_go.NewClient[v1alpha.GetSBOMInventoryRequest, v1alpha.GetSBOMInventoryResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetSBOMInventoryProcedure,
			opts...,
		),
		listComponents: connect_go.NewClient[v1alpha.ListComponentsRequest, v1alpha.ListComponentsResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListComponentsProcedure,
			opts...,
		),
		getComponent: connect_go.NewClient[v1alpha.GetComponentRequest, v1alpha.GetComponentResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetComponentProcedure,
			opts...,
		),
		createComponent: connect_go.NewClient[v1alpha.CreateComponentRequest, v1alpha.CreateComponentResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceCreateComponentProcedure,
			opts...,
		),
		updateComponent: connect_go.NewClient[v1alpha.UpdateComponentRequest, v1alpha.UpdateComponentResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceUpdateComponentProcedure,
			opts...,
		),
		deleteComponent: connect_go.NewClient[v1alpha.DeleteComponentRequest, v1alpha.DeleteComponentResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceDeleteComponentProcedure,
			opts...,
		),
		listComponentTags: connect_go.NewClient[v1alpha.ListComponentTagsRequest, v1alpha.ListComponentTagsResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListComponentTagsProcedure,
			opts...,
		),
		getComponentTag: connect_go.NewClient[v1alpha.GetComponentTagRequest, v1alpha.GetComponentTagResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetComponentTagProcedure,
			opts...,
		),
		setComponentTag: connect_go.NewClient[v1alpha.SetComponentTagRequest, v1alpha.SetComponentTagResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceSetComponentTagProcedure,
			opts...,
		),
		deleteComponentTag: connect_go.NewClient[v1alpha.DeleteComponentTagRequest, v1alpha.DeleteComponentTagResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceDeleteComponentTagProcedure,
			opts...,
		),
		getComponentTagsOverview: connect_go.NewClient[v1alpha.GetComponentTagsOverviewRequest, v1alpha.GetComponentTagsOverviewResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetComponentTagsOverviewProcedure,
			opts...,
		),
		getCIBotComment: connect_go.NewClient[v1alpha.GetCIBotCommentRequest, v1alpha.GetCIBotCommentResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetCIBotCommentProcedure,
			opts...,
		),
		listWorkloads: connect_go.NewClient[v1alpha.ListWorkloadsRequest, v1alpha.ListWorkloadsResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceListWorkloadsProcedure,
			opts...,
		),
		getWorkload: connect_go.NewClient[v1alpha.GetWorkloadRequest, v1alpha.GetWorkloadResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetWorkloadProcedure,
			opts...,
		),
		getSBOMDownloadUrl: connect_go.NewClient[v1alpha.GetSBOMDownloadUrlRequest, v1alpha.GetSBOMDownloadUrlResponse](
			httpClient,
			baseURL+EdgeBitPublicAPIServiceGetSBOMDownloadUrlProcedure,
			opts...,
		),
	}
}

// edgeBitPublicAPIServiceClient implements EdgeBitPublicAPIServiceClient.
type edgeBitPublicAPIServiceClient struct {
	listProjects             *connect_go.Client[v1alpha.ListProjectsRequest, v1alpha.ListProjectsResponse]
	generateAgentDeployToken *connect_go.Client[v1alpha.GenerateAgentDeployTokenRequest, v1alpha.GenerateAgentDeployTokenResponse]
	createAgentDeployToken   *connect_go.Client[v1alpha.CreateAgentDeployTokenRequest, v1alpha.CreateAgentDeployTokenResponse]
	listAgentDeployTokens    *connect_go.Client[v1alpha.ListAgentDeployTokensRequest, v1alpha.ListAgentDeployTokensResponse]
	deleteAgentDeployToken   *connect_go.Client[v1alpha.DeleteAgentDeployTokenRequest, v1alpha.DeleteAgentDeployTokenResponse]
	listMachines             *connect_go.Client[v1alpha.ListMachinesRequest, v1alpha.ListMachinesResponse]
	getMachineInventory      *connect_go.Client[v1alpha.GetMachineInventoryRequest, v1alpha.GetMachineInventoryResponse]
	overview                 *connect_go.Client[v1alpha.OverviewRequest, v1alpha.OverviewResponse]
	createOrgAccessToken     *connect_go.Client[v1alpha.CreateOrgAccessTokenRequest, v1alpha.CreateOrgAccessTokenResponse]
	listOrgAccessTokens      *connect_go.Client[v1alpha.ListOrgAccessTokensRequest, v1alpha.ListOrgAccessTokensResponse]
	deleteOrgAccessToken     *connect_go.Client[v1alpha.DeleteOrgAccessTokenRequest, v1alpha.DeleteOrgAccessTokenResponse]
	uploadSBOM               *connect_go.Client[v1alpha.UploadSBOMRequest, v1alpha.UploadSBOMResponse]
	listSBOMs                *connect_go.Client[v1alpha.ListSBOMsRequest, v1alpha.ListSBOMsResponse]
	getSBOM                  *connect_go.Client[v1alpha.GetSBOMRequest, v1alpha.GetSBOMResponse]
	getSBOMInventory         *connect_go.Client[v1alpha.GetSBOMInventoryRequest, v1alpha.GetSBOMInventoryResponse]
	listComponents           *connect_go.Client[v1alpha.ListComponentsRequest, v1alpha.ListComponentsResponse]
	getComponent             *connect_go.Client[v1alpha.GetComponentRequest, v1alpha.GetComponentResponse]
	createComponent          *connect_go.Client[v1alpha.CreateComponentRequest, v1alpha.CreateComponentResponse]
	updateComponent          *connect_go.Client[v1alpha.UpdateComponentRequest, v1alpha.UpdateComponentResponse]
	deleteComponent          *connect_go.Client[v1alpha.DeleteComponentRequest, v1alpha.DeleteComponentResponse]
	listComponentTags        *connect_go.Client[v1alpha.ListComponentTagsRequest, v1alpha.ListComponentTagsResponse]
	getComponentTag          *connect_go.Client[v1alpha.GetComponentTagRequest, v1alpha.GetComponentTagResponse]
	setComponentTag          *connect_go.Client[v1alpha.SetComponentTagRequest, v1alpha.SetComponentTagResponse]
	deleteComponentTag       *connect_go.Client[v1alpha.DeleteComponentTagRequest, v1alpha.DeleteComponentTagResponse]
	getComponentTagsOverview *connect_go.Client[v1alpha.GetComponentTagsOverviewRequest, v1alpha.GetComponentTagsOverviewResponse]
	getCIBotComment          *connect_go.Client[v1alpha.GetCIBotCommentRequest, v1alpha.GetCIBotCommentResponse]
	listWorkloads            *connect_go.Client[v1alpha.ListWorkloadsRequest, v1alpha.ListWorkloadsResponse]
	getWorkload              *connect_go.Client[v1alpha.GetWorkloadRequest, v1alpha.GetWorkloadResponse]
	getSBOMDownloadUrl       *connect_go.Client[v1alpha.GetSBOMDownloadUrlRequest, v1alpha.GetSBOMDownloadUrlResponse]
}

// ListProjects calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListProjects.
func (c *edgeBitPublicAPIServiceClient) ListProjects(ctx context.Context, req *connect_go.Request[v1alpha.ListProjectsRequest]) (*connect_go.Response[v1alpha.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GenerateAgentDeployToken calls
// edgebit.platform.v1alpha.EdgeBitPublicAPIService.GenerateAgentDeployToken.
func (c *edgeBitPublicAPIServiceClient) GenerateAgentDeployToken(ctx context.Context, req *connect_go.Request[v1alpha.GenerateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.GenerateAgentDeployTokenResponse], error) {
	return c.generateAgentDeployToken.CallUnary(ctx, req)
}

// CreateAgentDeployToken calls
// edgebit.platform.v1alpha.EdgeBitPublicAPIService.CreateAgentDeployToken.
func (c *edgeBitPublicAPIServiceClient) CreateAgentDeployToken(ctx context.Context, req *connect_go.Request[v1alpha.CreateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.CreateAgentDeployTokenResponse], error) {
	return c.createAgentDeployToken.CallUnary(ctx, req)
}

// ListAgentDeployTokens calls
// edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListAgentDeployTokens.
func (c *edgeBitPublicAPIServiceClient) ListAgentDeployTokens(ctx context.Context, req *connect_go.Request[v1alpha.ListAgentDeployTokensRequest]) (*connect_go.Response[v1alpha.ListAgentDeployTokensResponse], error) {
	return c.listAgentDeployTokens.CallUnary(ctx, req)
}

// DeleteAgentDeployToken calls
// edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteAgentDeployToken.
func (c *edgeBitPublicAPIServiceClient) DeleteAgentDeployToken(ctx context.Context, req *connect_go.Request[v1alpha.DeleteAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.DeleteAgentDeployTokenResponse], error) {
	return c.deleteAgentDeployToken.CallUnary(ctx, req)
}

// ListMachines calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListMachines.
func (c *edgeBitPublicAPIServiceClient) ListMachines(ctx context.Context, req *connect_go.Request[v1alpha.ListMachinesRequest]) (*connect_go.Response[v1alpha.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// GetMachineInventory calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetMachineInventory.
func (c *edgeBitPublicAPIServiceClient) GetMachineInventory(ctx context.Context, req *connect_go.Request[v1alpha.GetMachineInventoryRequest]) (*connect_go.Response[v1alpha.GetMachineInventoryResponse], error) {
	return c.getMachineInventory.CallUnary(ctx, req)
}

// Overview calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.Overview.
func (c *edgeBitPublicAPIServiceClient) Overview(ctx context.Context, req *connect_go.Request[v1alpha.OverviewRequest]) (*connect_go.Response[v1alpha.OverviewResponse], error) {
	return c.overview.CallUnary(ctx, req)
}

// CreateOrgAccessToken calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.CreateOrgAccessToken.
func (c *edgeBitPublicAPIServiceClient) CreateOrgAccessToken(ctx context.Context, req *connect_go.Request[v1alpha.CreateOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.CreateOrgAccessTokenResponse], error) {
	return c.createOrgAccessToken.CallUnary(ctx, req)
}

// ListOrgAccessTokens calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListOrgAccessTokens.
func (c *edgeBitPublicAPIServiceClient) ListOrgAccessTokens(ctx context.Context, req *connect_go.Request[v1alpha.ListOrgAccessTokensRequest]) (*connect_go.Response[v1alpha.ListOrgAccessTokensResponse], error) {
	return c.listOrgAccessTokens.CallUnary(ctx, req)
}

// DeleteOrgAccessToken calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteOrgAccessToken.
func (c *edgeBitPublicAPIServiceClient) DeleteOrgAccessToken(ctx context.Context, req *connect_go.Request[v1alpha.DeleteOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.DeleteOrgAccessTokenResponse], error) {
	return c.deleteOrgAccessToken.CallUnary(ctx, req)
}

// UploadSBOM calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.UploadSBOM.
func (c *edgeBitPublicAPIServiceClient) UploadSBOM(ctx context.Context) *connect_go.ClientStreamForClient[v1alpha.UploadSBOMRequest, v1alpha.UploadSBOMResponse] {
	return c.uploadSBOM.CallClientStream(ctx)
}

// ListSBOMs calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListSBOMs.
func (c *edgeBitPublicAPIServiceClient) ListSBOMs(ctx context.Context, req *connect_go.Request[v1alpha.ListSBOMsRequest]) (*connect_go.Response[v1alpha.ListSBOMsResponse], error) {
	return c.listSBOMs.CallUnary(ctx, req)
}

// GetSBOM calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetSBOM.
func (c *edgeBitPublicAPIServiceClient) GetSBOM(ctx context.Context, req *connect_go.Request[v1alpha.GetSBOMRequest]) (*connect_go.Response[v1alpha.GetSBOMResponse], error) {
	return c.getSBOM.CallUnary(ctx, req)
}

// GetSBOMInventory calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetSBOMInventory.
func (c *edgeBitPublicAPIServiceClient) GetSBOMInventory(ctx context.Context, req *connect_go.Request[v1alpha.GetSBOMInventoryRequest]) (*connect_go.Response[v1alpha.GetSBOMInventoryResponse], error) {
	return c.getSBOMInventory.CallUnary(ctx, req)
}

// ListComponents calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListComponents.
func (c *edgeBitPublicAPIServiceClient) ListComponents(ctx context.Context, req *connect_go.Request[v1alpha.ListComponentsRequest]) (*connect_go.Response[v1alpha.ListComponentsResponse], error) {
	return c.listComponents.CallUnary(ctx, req)
}

// GetComponent calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetComponent.
func (c *edgeBitPublicAPIServiceClient) GetComponent(ctx context.Context, req *connect_go.Request[v1alpha.GetComponentRequest]) (*connect_go.Response[v1alpha.GetComponentResponse], error) {
	return c.getComponent.CallUnary(ctx, req)
}

// CreateComponent calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.CreateComponent.
func (c *edgeBitPublicAPIServiceClient) CreateComponent(ctx context.Context, req *connect_go.Request[v1alpha.CreateComponentRequest]) (*connect_go.Response[v1alpha.CreateComponentResponse], error) {
	return c.createComponent.CallUnary(ctx, req)
}

// UpdateComponent calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.UpdateComponent.
func (c *edgeBitPublicAPIServiceClient) UpdateComponent(ctx context.Context, req *connect_go.Request[v1alpha.UpdateComponentRequest]) (*connect_go.Response[v1alpha.UpdateComponentResponse], error) {
	return c.updateComponent.CallUnary(ctx, req)
}

// DeleteComponent calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteComponent.
func (c *edgeBitPublicAPIServiceClient) DeleteComponent(ctx context.Context, req *connect_go.Request[v1alpha.DeleteComponentRequest]) (*connect_go.Response[v1alpha.DeleteComponentResponse], error) {
	return c.deleteComponent.CallUnary(ctx, req)
}

// ListComponentTags calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListComponentTags.
func (c *edgeBitPublicAPIServiceClient) ListComponentTags(ctx context.Context, req *connect_go.Request[v1alpha.ListComponentTagsRequest]) (*connect_go.Response[v1alpha.ListComponentTagsResponse], error) {
	return c.listComponentTags.CallUnary(ctx, req)
}

// GetComponentTag calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetComponentTag.
func (c *edgeBitPublicAPIServiceClient) GetComponentTag(ctx context.Context, req *connect_go.Request[v1alpha.GetComponentTagRequest]) (*connect_go.Response[v1alpha.GetComponentTagResponse], error) {
	return c.getComponentTag.CallUnary(ctx, req)
}

// SetComponentTag calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.SetComponentTag.
func (c *edgeBitPublicAPIServiceClient) SetComponentTag(ctx context.Context, req *connect_go.Request[v1alpha.SetComponentTagRequest]) (*connect_go.Response[v1alpha.SetComponentTagResponse], error) {
	return c.setComponentTag.CallUnary(ctx, req)
}

// DeleteComponentTag calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteComponentTag.
func (c *edgeBitPublicAPIServiceClient) DeleteComponentTag(ctx context.Context, req *connect_go.Request[v1alpha.DeleteComponentTagRequest]) (*connect_go.Response[v1alpha.DeleteComponentTagResponse], error) {
	return c.deleteComponentTag.CallUnary(ctx, req)
}

// GetComponentTagsOverview calls
// edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetComponentTagsOverview.
func (c *edgeBitPublicAPIServiceClient) GetComponentTagsOverview(ctx context.Context, req *connect_go.Request[v1alpha.GetComponentTagsOverviewRequest]) (*connect_go.Response[v1alpha.GetComponentTagsOverviewResponse], error) {
	return c.getComponentTagsOverview.CallUnary(ctx, req)
}

// GetCIBotComment calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetCIBotComment.
func (c *edgeBitPublicAPIServiceClient) GetCIBotComment(ctx context.Context, req *connect_go.Request[v1alpha.GetCIBotCommentRequest]) (*connect_go.Response[v1alpha.GetCIBotCommentResponse], error) {
	return c.getCIBotComment.CallUnary(ctx, req)
}

// ListWorkloads calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListWorkloads.
func (c *edgeBitPublicAPIServiceClient) ListWorkloads(ctx context.Context, req *connect_go.Request[v1alpha.ListWorkloadsRequest]) (*connect_go.Response[v1alpha.ListWorkloadsResponse], error) {
	return c.listWorkloads.CallUnary(ctx, req)
}

// GetWorkload calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetWorkload.
func (c *edgeBitPublicAPIServiceClient) GetWorkload(ctx context.Context, req *connect_go.Request[v1alpha.GetWorkloadRequest]) (*connect_go.Response[v1alpha.GetWorkloadResponse], error) {
	return c.getWorkload.CallUnary(ctx, req)
}

// GetSBOMDownloadUrl calls edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetSBOMDownloadUrl.
func (c *edgeBitPublicAPIServiceClient) GetSBOMDownloadUrl(ctx context.Context, req *connect_go.Request[v1alpha.GetSBOMDownloadUrlRequest]) (*connect_go.Response[v1alpha.GetSBOMDownloadUrlResponse], error) {
	return c.getSBOMDownloadUrl.CallUnary(ctx, req)
}

// EdgeBitPublicAPIServiceHandler is an implementation of the
// edgebit.platform.v1alpha.EdgeBitPublicAPIService service.
type EdgeBitPublicAPIServiceHandler interface {
	// Project Management (org-scoped)
	ListProjects(context.Context, *connect_go.Request[v1alpha.ListProjectsRequest]) (*connect_go.Response[v1alpha.ListProjectsResponse], error)
	// Agent Deployment Token Management (project-scoped)
	GenerateAgentDeployToken(context.Context, *connect_go.Request[v1alpha.GenerateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.GenerateAgentDeployTokenResponse], error)
	CreateAgentDeployToken(context.Context, *connect_go.Request[v1alpha.CreateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.CreateAgentDeployTokenResponse], error)
	ListAgentDeployTokens(context.Context, *connect_go.Request[v1alpha.ListAgentDeployTokensRequest]) (*connect_go.Response[v1alpha.ListAgentDeployTokensResponse], error)
	DeleteAgentDeployToken(context.Context, *connect_go.Request[v1alpha.DeleteAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.DeleteAgentDeployTokenResponse], error)
	// Machine Management (project-scoped)
	ListMachines(context.Context, *connect_go.Request[v1alpha.ListMachinesRequest]) (*connect_go.Response[v1alpha.ListMachinesResponse], error)
	// Inventory Exploration (project-scoped)
	GetMachineInventory(context.Context, *connect_go.Request[v1alpha.GetMachineInventoryRequest]) (*connect_go.Response[v1alpha.GetMachineInventoryResponse], error)
	Overview(context.Context, *connect_go.Request[v1alpha.OverviewRequest]) (*connect_go.Response[v1alpha.OverviewResponse], error)
	// Org (Project) Access Token Management (project-scoped)
	CreateOrgAccessToken(context.Context, *connect_go.Request[v1alpha.CreateOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.CreateOrgAccessTokenResponse], error)
	ListOrgAccessTokens(context.Context, *connect_go.Request[v1alpha.ListOrgAccessTokensRequest]) (*connect_go.Response[v1alpha.ListOrgAccessTokensResponse], error)
	DeleteOrgAccessToken(context.Context, *connect_go.Request[v1alpha.DeleteOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.DeleteOrgAccessTokenResponse], error)
	// SBOM Management (project-scoped)
	UploadSBOM(context.Context, *connect_go.ClientStream[v1alpha.UploadSBOMRequest]) (*connect_go.Response[v1alpha.UploadSBOMResponse], error)
	ListSBOMs(context.Context, *connect_go.Request[v1alpha.ListSBOMsRequest]) (*connect_go.Response[v1alpha.ListSBOMsResponse], error)
	GetSBOM(context.Context, *connect_go.Request[v1alpha.GetSBOMRequest]) (*connect_go.Response[v1alpha.GetSBOMResponse], error)
	GetSBOMInventory(context.Context, *connect_go.Request[v1alpha.GetSBOMInventoryRequest]) (*connect_go.Response[v1alpha.GetSBOMInventoryResponse], error)
	// Componeent Management (project-scoped)
	ListComponents(context.Context, *connect_go.Request[v1alpha.ListComponentsRequest]) (*connect_go.Response[v1alpha.ListComponentsResponse], error)
	GetComponent(context.Context, *connect_go.Request[v1alpha.GetComponentRequest]) (*connect_go.Response[v1alpha.GetComponentResponse], error)
	CreateComponent(context.Context, *connect_go.Request[v1alpha.CreateComponentRequest]) (*connect_go.Response[v1alpha.CreateComponentResponse], error)
	UpdateComponent(context.Context, *connect_go.Request[v1alpha.UpdateComponentRequest]) (*connect_go.Response[v1alpha.UpdateComponentResponse], error)
	DeleteComponent(context.Context, *connect_go.Request[v1alpha.DeleteComponentRequest]) (*connect_go.Response[v1alpha.DeleteComponentResponse], error)
	// Component Tags Management (project-scoped)
	ListComponentTags(context.Context, *connect_go.Request[v1alpha.ListComponentTagsRequest]) (*connect_go.Response[v1alpha.ListComponentTagsResponse], error)
	GetComponentTag(context.Context, *connect_go.Request[v1alpha.GetComponentTagRequest]) (*connect_go.Response[v1alpha.GetComponentTagResponse], error)
	SetComponentTag(context.Context, *connect_go.Request[v1alpha.SetComponentTagRequest]) (*connect_go.Response[v1alpha.SetComponentTagResponse], error)
	DeleteComponentTag(context.Context, *connect_go.Request[v1alpha.DeleteComponentTagRequest]) (*connect_go.Response[v1alpha.DeleteComponentTagResponse], error)
	GetComponentTagsOverview(context.Context, *connect_go.Request[v1alpha.GetComponentTagsOverviewRequest]) (*connect_go.Response[v1alpha.GetComponentTagsOverviewResponse], error)
	// CI/CD Integration (project-scoped)
	GetCIBotComment(context.Context, *connect_go.Request[v1alpha.GetCIBotCommentRequest]) (*connect_go.Response[v1alpha.GetCIBotCommentResponse], error)
	// Workload Management (project-scoped)
	ListWorkloads(context.Context, *connect_go.Request[v1alpha.ListWorkloadsRequest]) (*connect_go.Response[v1alpha.ListWorkloadsResponse], error)
	GetWorkload(context.Context, *connect_go.Request[v1alpha.GetWorkloadRequest]) (*connect_go.Response[v1alpha.GetWorkloadResponse], error)
	// Get Sbom Download Url
	GetSBOMDownloadUrl(context.Context, *connect_go.Request[v1alpha.GetSBOMDownloadUrlRequest]) (*connect_go.Response[v1alpha.GetSBOMDownloadUrlResponse], error)
}

// NewEdgeBitPublicAPIServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEdgeBitPublicAPIServiceHandler(svc EdgeBitPublicAPIServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(EdgeBitPublicAPIServiceListProjectsProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListProjectsProcedure,
		svc.ListProjects,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGenerateAgentDeployTokenProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGenerateAgentDeployTokenProcedure,
		svc.GenerateAgentDeployToken,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceCreateAgentDeployTokenProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceCreateAgentDeployTokenProcedure,
		svc.CreateAgentDeployToken,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListAgentDeployTokensProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListAgentDeployTokensProcedure,
		svc.ListAgentDeployTokens,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceDeleteAgentDeployTokenProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceDeleteAgentDeployTokenProcedure,
		svc.DeleteAgentDeployToken,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListMachinesProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListMachinesProcedure,
		svc.ListMachines,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetMachineInventoryProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetMachineInventoryProcedure,
		svc.GetMachineInventory,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceOverviewProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceOverviewProcedure,
		svc.Overview,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceCreateOrgAccessTokenProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceCreateOrgAccessTokenProcedure,
		svc.CreateOrgAccessToken,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListOrgAccessTokensProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListOrgAccessTokensProcedure,
		svc.ListOrgAccessTokens,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceDeleteOrgAccessTokenProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceDeleteOrgAccessTokenProcedure,
		svc.DeleteOrgAccessToken,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceUploadSBOMProcedure, connect_go.NewClientStreamHandler(
		EdgeBitPublicAPIServiceUploadSBOMProcedure,
		svc.UploadSBOM,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListSBOMsProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListSBOMsProcedure,
		svc.ListSBOMs,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetSBOMProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetSBOMProcedure,
		svc.GetSBOM,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetSBOMInventoryProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetSBOMInventoryProcedure,
		svc.GetSBOMInventory,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListComponentsProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListComponentsProcedure,
		svc.ListComponents,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetComponentProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetComponentProcedure,
		svc.GetComponent,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceCreateComponentProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceCreateComponentProcedure,
		svc.CreateComponent,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceUpdateComponentProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceUpdateComponentProcedure,
		svc.UpdateComponent,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceDeleteComponentProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceDeleteComponentProcedure,
		svc.DeleteComponent,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListComponentTagsProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListComponentTagsProcedure,
		svc.ListComponentTags,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetComponentTagProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetComponentTagProcedure,
		svc.GetComponentTag,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceSetComponentTagProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceSetComponentTagProcedure,
		svc.SetComponentTag,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceDeleteComponentTagProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceDeleteComponentTagProcedure,
		svc.DeleteComponentTag,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetComponentTagsOverviewProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetComponentTagsOverviewProcedure,
		svc.GetComponentTagsOverview,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetCIBotCommentProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetCIBotCommentProcedure,
		svc.GetCIBotComment,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceListWorkloadsProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceListWorkloadsProcedure,
		svc.ListWorkloads,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetWorkloadProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetWorkloadProcedure,
		svc.GetWorkload,
		opts...,
	))
	mux.Handle(EdgeBitPublicAPIServiceGetSBOMDownloadUrlProcedure, connect_go.NewUnaryHandler(
		EdgeBitPublicAPIServiceGetSBOMDownloadUrlProcedure,
		svc.GetSBOMDownloadUrl,
		opts...,
	))
	return "/edgebit.platform.v1alpha.EdgeBitPublicAPIService/", mux
}

// UnimplementedEdgeBitPublicAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEdgeBitPublicAPIServiceHandler struct{}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListProjects(context.Context, *connect_go.Request[v1alpha.ListProjectsRequest]) (*connect_go.Response[v1alpha.ListProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListProjects is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GenerateAgentDeployToken(context.Context, *connect_go.Request[v1alpha.GenerateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.GenerateAgentDeployTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GenerateAgentDeployToken is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) CreateAgentDeployToken(context.Context, *connect_go.Request[v1alpha.CreateAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.CreateAgentDeployTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.CreateAgentDeployToken is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListAgentDeployTokens(context.Context, *connect_go.Request[v1alpha.ListAgentDeployTokensRequest]) (*connect_go.Response[v1alpha.ListAgentDeployTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListAgentDeployTokens is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) DeleteAgentDeployToken(context.Context, *connect_go.Request[v1alpha.DeleteAgentDeployTokenRequest]) (*connect_go.Response[v1alpha.DeleteAgentDeployTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteAgentDeployToken is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListMachines(context.Context, *connect_go.Request[v1alpha.ListMachinesRequest]) (*connect_go.Response[v1alpha.ListMachinesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListMachines is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetMachineInventory(context.Context, *connect_go.Request[v1alpha.GetMachineInventoryRequest]) (*connect_go.Response[v1alpha.GetMachineInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetMachineInventory is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) Overview(context.Context, *connect_go.Request[v1alpha.OverviewRequest]) (*connect_go.Response[v1alpha.OverviewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.Overview is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) CreateOrgAccessToken(context.Context, *connect_go.Request[v1alpha.CreateOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.CreateOrgAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.CreateOrgAccessToken is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListOrgAccessTokens(context.Context, *connect_go.Request[v1alpha.ListOrgAccessTokensRequest]) (*connect_go.Response[v1alpha.ListOrgAccessTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListOrgAccessTokens is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) DeleteOrgAccessToken(context.Context, *connect_go.Request[v1alpha.DeleteOrgAccessTokenRequest]) (*connect_go.Response[v1alpha.DeleteOrgAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteOrgAccessToken is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) UploadSBOM(context.Context, *connect_go.ClientStream[v1alpha.UploadSBOMRequest]) (*connect_go.Response[v1alpha.UploadSBOMResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.UploadSBOM is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListSBOMs(context.Context, *connect_go.Request[v1alpha.ListSBOMsRequest]) (*connect_go.Response[v1alpha.ListSBOMsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListSBOMs is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetSBOM(context.Context, *connect_go.Request[v1alpha.GetSBOMRequest]) (*connect_go.Response[v1alpha.GetSBOMResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetSBOM is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetSBOMInventory(context.Context, *connect_go.Request[v1alpha.GetSBOMInventoryRequest]) (*connect_go.Response[v1alpha.GetSBOMInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetSBOMInventory is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListComponents(context.Context, *connect_go.Request[v1alpha.ListComponentsRequest]) (*connect_go.Response[v1alpha.ListComponentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListComponents is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetComponent(context.Context, *connect_go.Request[v1alpha.GetComponentRequest]) (*connect_go.Response[v1alpha.GetComponentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetComponent is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) CreateComponent(context.Context, *connect_go.Request[v1alpha.CreateComponentRequest]) (*connect_go.Response[v1alpha.CreateComponentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.CreateComponent is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) UpdateComponent(context.Context, *connect_go.Request[v1alpha.UpdateComponentRequest]) (*connect_go.Response[v1alpha.UpdateComponentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.UpdateComponent is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) DeleteComponent(context.Context, *connect_go.Request[v1alpha.DeleteComponentRequest]) (*connect_go.Response[v1alpha.DeleteComponentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteComponent is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListComponentTags(context.Context, *connect_go.Request[v1alpha.ListComponentTagsRequest]) (*connect_go.Response[v1alpha.ListComponentTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListComponentTags is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetComponentTag(context.Context, *connect_go.Request[v1alpha.GetComponentTagRequest]) (*connect_go.Response[v1alpha.GetComponentTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetComponentTag is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) SetComponentTag(context.Context, *connect_go.Request[v1alpha.SetComponentTagRequest]) (*connect_go.Response[v1alpha.SetComponentTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.SetComponentTag is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) DeleteComponentTag(context.Context, *connect_go.Request[v1alpha.DeleteComponentTagRequest]) (*connect_go.Response[v1alpha.DeleteComponentTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.DeleteComponentTag is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetComponentTagsOverview(context.Context, *connect_go.Request[v1alpha.GetComponentTagsOverviewRequest]) (*connect_go.Response[v1alpha.GetComponentTagsOverviewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetComponentTagsOverview is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetCIBotComment(context.Context, *connect_go.Request[v1alpha.GetCIBotCommentRequest]) (*connect_go.Response[v1alpha.GetCIBotCommentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetCIBotComment is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) ListWorkloads(context.Context, *connect_go.Request[v1alpha.ListWorkloadsRequest]) (*connect_go.Response[v1alpha.ListWorkloadsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.ListWorkloads is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetWorkload(context.Context, *connect_go.Request[v1alpha.GetWorkloadRequest]) (*connect_go.Response[v1alpha.GetWorkloadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetWorkload is not implemented"))
}

func (UnimplementedEdgeBitPublicAPIServiceHandler) GetSBOMDownloadUrl(context.Context, *connect_go.Request[v1alpha.GetSBOMDownloadUrlRequest]) (*connect_go.Response[v1alpha.GetSBOMDownloadUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.EdgeBitPublicAPIService.GetSBOMDownloadUrl is not implemented"))
}
