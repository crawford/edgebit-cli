// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: edgebit/platform/v1alpha/login.proto

package platformv1alphaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha "github.com/edgebitio/edgebit-cli/pkg/pb/edgebit/platform/v1alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// LoginServiceName is the fully-qualified name of the LoginService service.
	LoginServiceName = "edgebit.platform.v1alpha.LoginService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoginServiceGetLoginMethodProcedure is the fully-qualified name of the LoginService's
	// GetLoginMethod RPC.
	LoginServiceGetLoginMethodProcedure = "/edgebit.platform.v1alpha.LoginService/GetLoginMethod"
	// LoginServicePasswordLoginProcedure is the fully-qualified name of the LoginService's
	// PasswordLogin RPC.
	LoginServicePasswordLoginProcedure = "/edgebit.platform.v1alpha.LoginService/PasswordLogin"
	// LoginServiceOIDCCallbackProcedure is the fully-qualified name of the LoginService's OIDCCallback
	// RPC.
	LoginServiceOIDCCallbackProcedure = "/edgebit.platform.v1alpha.LoginService/OIDCCallback"
	// LoginServiceExchangeInviteTokenProcedure is the fully-qualified name of the LoginService's
	// ExchangeInviteToken RPC.
	LoginServiceExchangeInviteTokenProcedure = "/edgebit.platform.v1alpha.LoginService/ExchangeInviteToken"
	// LoginServiceAPIAccessTokenLoginProcedure is the fully-qualified name of the LoginService's
	// APIAccessTokenLogin RPC.
	LoginServiceAPIAccessTokenLoginProcedure = "/edgebit.platform.v1alpha.LoginService/APIAccessTokenLogin"
)

// LoginServiceClient is a client for the edgebit.platform.v1alpha.LoginService service.
type LoginServiceClient interface {
	GetLoginMethod(context.Context, *connect.Request[v1alpha.GetLoginMethodRequest]) (*connect.Response[v1alpha.GetLoginMethodResponse], error)
	PasswordLogin(context.Context, *connect.Request[v1alpha.PasswordLoginRequest]) (*connect.Response[v1alpha.PasswordLoginResponse], error)
	OIDCCallback(context.Context, *connect.Request[v1alpha.OIDCCallbackRequest]) (*connect.Response[v1alpha.OIDCCallbackResponse], error)
	ExchangeInviteToken(context.Context, *connect.Request[v1alpha.ExchangeInviteTokenRequest]) (*connect.Response[v1alpha.ExchangeInviteTokenResponse], error)
	APIAccessTokenLogin(context.Context, *connect.Request[v1alpha.APIAccessTokenLoginRequest]) (*connect.Response[v1alpha.APIAccessTokenLoginResponse], error)
}

// NewLoginServiceClient constructs a client for the edgebit.platform.v1alpha.LoginService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LoginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &loginServiceClient{
		getLoginMethod: connect.NewClient[v1alpha.GetLoginMethodRequest, v1alpha.GetLoginMethodResponse](
			httpClient,
			baseURL+LoginServiceGetLoginMethodProcedure,
			opts...,
		),
		passwordLogin: connect.NewClient[v1alpha.PasswordLoginRequest, v1alpha.PasswordLoginResponse](
			httpClient,
			baseURL+LoginServicePasswordLoginProcedure,
			opts...,
		),
		oIDCCallback: connect.NewClient[v1alpha.OIDCCallbackRequest, v1alpha.OIDCCallbackResponse](
			httpClient,
			baseURL+LoginServiceOIDCCallbackProcedure,
			opts...,
		),
		exchangeInviteToken: connect.NewClient[v1alpha.ExchangeInviteTokenRequest, v1alpha.ExchangeInviteTokenResponse](
			httpClient,
			baseURL+LoginServiceExchangeInviteTokenProcedure,
			opts...,
		),
		aPIAccessTokenLogin: connect.NewClient[v1alpha.APIAccessTokenLoginRequest, v1alpha.APIAccessTokenLoginResponse](
			httpClient,
			baseURL+LoginServiceAPIAccessTokenLoginProcedure,
			opts...,
		),
	}
}

// loginServiceClient implements LoginServiceClient.
type loginServiceClient struct {
	getLoginMethod      *connect.Client[v1alpha.GetLoginMethodRequest, v1alpha.GetLoginMethodResponse]
	passwordLogin       *connect.Client[v1alpha.PasswordLoginRequest, v1alpha.PasswordLoginResponse]
	oIDCCallback        *connect.Client[v1alpha.OIDCCallbackRequest, v1alpha.OIDCCallbackResponse]
	exchangeInviteToken *connect.Client[v1alpha.ExchangeInviteTokenRequest, v1alpha.ExchangeInviteTokenResponse]
	aPIAccessTokenLogin *connect.Client[v1alpha.APIAccessTokenLoginRequest, v1alpha.APIAccessTokenLoginResponse]
}

// GetLoginMethod calls edgebit.platform.v1alpha.LoginService.GetLoginMethod.
func (c *loginServiceClient) GetLoginMethod(ctx context.Context, req *connect.Request[v1alpha.GetLoginMethodRequest]) (*connect.Response[v1alpha.GetLoginMethodResponse], error) {
	return c.getLoginMethod.CallUnary(ctx, req)
}

// PasswordLogin calls edgebit.platform.v1alpha.LoginService.PasswordLogin.
func (c *loginServiceClient) PasswordLogin(ctx context.Context, req *connect.Request[v1alpha.PasswordLoginRequest]) (*connect.Response[v1alpha.PasswordLoginResponse], error) {
	return c.passwordLogin.CallUnary(ctx, req)
}

// OIDCCallback calls edgebit.platform.v1alpha.LoginService.OIDCCallback.
func (c *loginServiceClient) OIDCCallback(ctx context.Context, req *connect.Request[v1alpha.OIDCCallbackRequest]) (*connect.Response[v1alpha.OIDCCallbackResponse], error) {
	return c.oIDCCallback.CallUnary(ctx, req)
}

// ExchangeInviteToken calls edgebit.platform.v1alpha.LoginService.ExchangeInviteToken.
func (c *loginServiceClient) ExchangeInviteToken(ctx context.Context, req *connect.Request[v1alpha.ExchangeInviteTokenRequest]) (*connect.Response[v1alpha.ExchangeInviteTokenResponse], error) {
	return c.exchangeInviteToken.CallUnary(ctx, req)
}

// APIAccessTokenLogin calls edgebit.platform.v1alpha.LoginService.APIAccessTokenLogin.
func (c *loginServiceClient) APIAccessTokenLogin(ctx context.Context, req *connect.Request[v1alpha.APIAccessTokenLoginRequest]) (*connect.Response[v1alpha.APIAccessTokenLoginResponse], error) {
	return c.aPIAccessTokenLogin.CallUnary(ctx, req)
}

// LoginServiceHandler is an implementation of the edgebit.platform.v1alpha.LoginService service.
type LoginServiceHandler interface {
	GetLoginMethod(context.Context, *connect.Request[v1alpha.GetLoginMethodRequest]) (*connect.Response[v1alpha.GetLoginMethodResponse], error)
	PasswordLogin(context.Context, *connect.Request[v1alpha.PasswordLoginRequest]) (*connect.Response[v1alpha.PasswordLoginResponse], error)
	OIDCCallback(context.Context, *connect.Request[v1alpha.OIDCCallbackRequest]) (*connect.Response[v1alpha.OIDCCallbackResponse], error)
	ExchangeInviteToken(context.Context, *connect.Request[v1alpha.ExchangeInviteTokenRequest]) (*connect.Response[v1alpha.ExchangeInviteTokenResponse], error)
	APIAccessTokenLogin(context.Context, *connect.Request[v1alpha.APIAccessTokenLoginRequest]) (*connect.Response[v1alpha.APIAccessTokenLoginResponse], error)
}

// NewLoginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoginServiceHandler(svc LoginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	loginServiceGetLoginMethodHandler := connect.NewUnaryHandler(
		LoginServiceGetLoginMethodProcedure,
		svc.GetLoginMethod,
		opts...,
	)
	loginServicePasswordLoginHandler := connect.NewUnaryHandler(
		LoginServicePasswordLoginProcedure,
		svc.PasswordLogin,
		opts...,
	)
	loginServiceOIDCCallbackHandler := connect.NewUnaryHandler(
		LoginServiceOIDCCallbackProcedure,
		svc.OIDCCallback,
		opts...,
	)
	loginServiceExchangeInviteTokenHandler := connect.NewUnaryHandler(
		LoginServiceExchangeInviteTokenProcedure,
		svc.ExchangeInviteToken,
		opts...,
	)
	loginServiceAPIAccessTokenLoginHandler := connect.NewUnaryHandler(
		LoginServiceAPIAccessTokenLoginProcedure,
		svc.APIAccessTokenLogin,
		opts...,
	)
	return "/edgebit.platform.v1alpha.LoginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoginServiceGetLoginMethodProcedure:
			loginServiceGetLoginMethodHandler.ServeHTTP(w, r)
		case LoginServicePasswordLoginProcedure:
			loginServicePasswordLoginHandler.ServeHTTP(w, r)
		case LoginServiceOIDCCallbackProcedure:
			loginServiceOIDCCallbackHandler.ServeHTTP(w, r)
		case LoginServiceExchangeInviteTokenProcedure:
			loginServiceExchangeInviteTokenHandler.ServeHTTP(w, r)
		case LoginServiceAPIAccessTokenLoginProcedure:
			loginServiceAPIAccessTokenLoginHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoginServiceHandler struct{}

func (UnimplementedLoginServiceHandler) GetLoginMethod(context.Context, *connect.Request[v1alpha.GetLoginMethodRequest]) (*connect.Response[v1alpha.GetLoginMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.LoginService.GetLoginMethod is not implemented"))
}

func (UnimplementedLoginServiceHandler) PasswordLogin(context.Context, *connect.Request[v1alpha.PasswordLoginRequest]) (*connect.Response[v1alpha.PasswordLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.LoginService.PasswordLogin is not implemented"))
}

func (UnimplementedLoginServiceHandler) OIDCCallback(context.Context, *connect.Request[v1alpha.OIDCCallbackRequest]) (*connect.Response[v1alpha.OIDCCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.LoginService.OIDCCallback is not implemented"))
}

func (UnimplementedLoginServiceHandler) ExchangeInviteToken(context.Context, *connect.Request[v1alpha.ExchangeInviteTokenRequest]) (*connect.Response[v1alpha.ExchangeInviteTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.LoginService.ExchangeInviteToken is not implemented"))
}

func (UnimplementedLoginServiceHandler) APIAccessTokenLogin(context.Context, *connect.Request[v1alpha.APIAccessTokenLoginRequest]) (*connect.Response[v1alpha.APIAccessTokenLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("edgebit.platform.v1alpha.LoginService.APIAccessTokenLogin is not implemented"))
}
